package com.cjq.yicaijiaoyu.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cjq.yicaijiaoyu.dao.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COURSE.
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Length = new Property(1, String.class, "length", false, "LENGTH");
        public final static Property Progress = new Property(2, Integer.class, "progress", false, "PROGRESS");
        public final static Property RequestApi = new Property(3, String.class, "requestApi", false, "REQUEST_API");
        public final static Property Thumb = new Property(4, String.class, "thumb", false, "THUMB");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property LectureName = new Property(6, String.class, "lectureName", false, "LECTURE_NAME");
        public final static Property Category = new Property(7, String.class, "category", false, "CATEGORY");
        public final static Property Intro = new Property(8, String.class, "intro", false, "INTRO");
        public final static Property CourseId = new Property(9, String.class, "courseId", false, "COURSE_ID");
        public final static Property Free = new Property(10, Boolean.class, "free", false, "FREE");
    };

    private DaoSession daoSession;


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COURSE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LENGTH' TEXT," + // 1: length
                "'PROGRESS' INTEGER," + // 2: progress
                "'REQUEST_API' TEXT," + // 3: requestApi
                "'THUMB' TEXT," + // 4: thumb
                "'TITLE' TEXT," + // 5: title
                "'LECTURE_NAME' TEXT," + // 6: lectureName
                "'CATEGORY' TEXT," + // 7: category
                "'INTRO' TEXT," + // 8: intro
                "'COURSE_ID' TEXT," + // 9: courseId
                "'FREE' INTEGER);"); // 10: free
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COURSE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String length = entity.getLength();
        if (length != null) {
            stmt.bindString(2, length);
        }
 
        Integer progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(3, progress);
        }
 
        String requestApi = entity.getRequestApi();
        if (requestApi != null) {
            stmt.bindString(4, requestApi);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(5, thumb);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String lectureName = entity.getLectureName();
        if (lectureName != null) {
            stmt.bindString(7, lectureName);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(8, category);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(9, intro);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(10, courseId);
        }
 
        Boolean free = entity.getFree();
        if (free != null) {
            stmt.bindLong(11, free ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Course entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // length
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // progress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // requestApi
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thumb
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lectureName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // category
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // intro
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // courseId
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // free
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLength(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProgress(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRequestApi(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumb(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLectureName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCategory(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIntro(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCourseId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFree(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
