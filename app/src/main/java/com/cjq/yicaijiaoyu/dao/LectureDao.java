package com.cjq.yicaijiaoyu.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.cjq.yicaijiaoyu.dao.Lecture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LECTURE.
*/
public class LectureDao extends AbstractDao<Lecture, Long> {

    public static final String TABLENAME = "LECTURE";

    /**
     * Properties of entity Lecture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Goods_id = new Property(0, String.class, "goods_id", false, "GOODS_ID");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property LectureId = new Property(3, String.class, "lectureId", false, "LECTURE_ID");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Info = new Property(5, String.class, "info", false, "INFO");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Lecture> course_LectureListQuery;
    private Query<Lecture> cared_LectureListQuery;
    private Query<Lecture> bought_LectureListQuery;
    private Query<Lecture> history_LectureListQuery;

    public LectureDao(DaoConfig config) {
        super(config);
    }
    
    public LectureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LECTURE' (" + //
                "'GOODS_ID' TEXT," + // 0: goods_id
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: id
                "'NAME' TEXT," + // 2: name
                "'LECTURE_ID' TEXT," + // 3: lectureId
                "'IMAGE' TEXT," + // 4: image
                "'INFO' TEXT," + // 5: info
                "'USER_ID' TEXT);"); // 6: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LECTURE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Lecture entity) {
        stmt.clearBindings();
 
        String goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindString(1, goods_id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String lectureId = entity.getLectureId();
        if (lectureId != null) {
            stmt.bindString(4, lectureId);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
    }

    @Override
    protected void attachEntity(Lecture entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Lecture readEntity(Cursor cursor, int offset) {
        Lecture entity = new Lecture( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // goods_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lectureId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Lecture entity, int offset) {
        entity.setGoods_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLectureId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Lecture entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Lecture entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lectureList" to-many relationship of Course. */
    public List<Lecture> _queryCourse_LectureList(String goods_id) {
        synchronized (this) {
            if (course_LectureListQuery == null) {
                QueryBuilder<Lecture> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Goods_id.eq(null));
                course_LectureListQuery = queryBuilder.build();
            }
        }
        Query<Lecture> query = course_LectureListQuery.forCurrentThread();
        query.setParameter(0, goods_id);
        return query.list();
    }

    /** Internal query to resolve the "lectureList" to-many relationship of Cared. */
    public List<Lecture> _queryCared_LectureList(String goods_id) {
        synchronized (this) {
            if (cared_LectureListQuery == null) {
                QueryBuilder<Lecture> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Goods_id.eq(null));
                cared_LectureListQuery = queryBuilder.build();
            }
        }
        Query<Lecture> query = cared_LectureListQuery.forCurrentThread();
        query.setParameter(0, goods_id);
        return query.list();
    }

    /** Internal query to resolve the "lectureList" to-many relationship of Bought. */
    public List<Lecture> _queryBought_LectureList(String goods_id) {
        synchronized (this) {
            if (bought_LectureListQuery == null) {
                QueryBuilder<Lecture> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Goods_id.eq(null));
                bought_LectureListQuery = queryBuilder.build();
            }
        }
        Query<Lecture> query = bought_LectureListQuery.forCurrentThread();
        query.setParameter(0, goods_id);
        return query.list();
    }

    /** Internal query to resolve the "lectureList" to-many relationship of History. */
    public List<Lecture> _queryHistory_LectureList(String goods_id) {
        synchronized (this) {
            if (history_LectureListQuery == null) {
                QueryBuilder<Lecture> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Goods_id.eq(null));
                history_LectureListQuery = queryBuilder.build();
            }
        }
        Query<Lecture> query = history_LectureListQuery.forCurrentThread();
        query.setParameter(0, goods_id);
        return query.list();
    }

}
