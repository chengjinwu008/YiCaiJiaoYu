package com.cjq.yicaijiaoyu.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cjq.yicaijiaoyu.dao.Cared;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CARED.
*/
public class CaredDao extends AbstractDao<Cared, Long> {

    public static final String TABLENAME = "CARED";

    /**
     * Properties of entity Cared.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Authority = new Property(2, Integer.class, "authority", false, "AUTHORITY");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property Order = new Property(5, Long.class, "order", false, "ORDER");
        public final static Property Bought = new Property(6, Boolean.class, "bought", false, "BOUGHT");
        public final static Property CategoryName = new Property(7, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property Goods_id = new Property(8, String.class, "goods_id", false, "GOODS_ID");
        public final static Property Info = new Property(9, String.class, "info", false, "INFO");
    };

    private DaoSession daoSession;


    public CaredDao(DaoConfig config) {
        super(config);
    }
    
    public CaredDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CARED' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'AUTHORITY' INTEGER," + // 2: authority
                "'IMAGE' TEXT," + // 3: image
                "'USER_ID' TEXT," + // 4: userId
                "'ORDER' INTEGER," + // 5: order
                "'BOUGHT' INTEGER," + // 6: bought
                "'CATEGORY_NAME' TEXT," + // 7: categoryName
                "'GOODS_ID' TEXT," + // 8: goods_id
                "'INFO' TEXT);"); // 9: info
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CARED'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cared entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer authority = entity.getAuthority();
        if (authority != null) {
            stmt.bindLong(3, authority);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        Long order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(6, order);
        }
 
        Boolean bought = entity.getBought();
        if (bought != null) {
            stmt.bindLong(7, bought ? 1l: 0l);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(8, categoryName);
        }
 
        String goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindString(9, goods_id);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(10, info);
        }
    }

    @Override
    protected void attachEntity(Cared entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cared readEntity(Cursor cursor, int offset) {
        Cared entity = new Cared( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // authority
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // order
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // bought
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // categoryName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // goods_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // info
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cared entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthority(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrder(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBought(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCategoryName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGoods_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cared entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cared entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
