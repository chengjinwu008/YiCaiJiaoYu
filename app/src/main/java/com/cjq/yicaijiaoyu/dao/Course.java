package com.cjq.yicaijiaoyu.dao;

import java.util.List;
import com.cjq.yicaijiaoyu.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table COURSE.
 */
public class Course {

    private Long id;
    private String name;
    private Boolean giftBag;
    private Integer authority;
    private String image;
    private String userId;
    private Long order;
    private Boolean cared;
    private String categoryName;
    private Boolean bought;
    private String goods_id;
    private Long categoryId;
    private String info;
    private String parent_goods_id;

    public void setLectureList(List<Lecture> lectureList) {
        this.lectureList = lectureList;
    }

    public void setCourseList(List<Course> courseList) {
        this.courseList = courseList;
    }

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CourseDao myDao;

    private List<Course> courseList;
    private List<Lecture> lectureList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Course() {
    }

    public Course(Long id) {
        this.id = id;
    }

    public Course(Long id, String name, Boolean giftBag, Integer authority, String image, String userId, Long order, Boolean cared, String categoryName, Boolean bought, String goods_id, Long categoryId, String info, String parent_goods_id) {
        this.id = id;
        this.name = name;
        this.giftBag = giftBag;
        this.authority = authority;
        this.image = image;
        this.userId = userId;
        this.order = order;
        this.cared = cared;
        this.categoryName = categoryName;
        this.bought = bought;
        this.goods_id = goods_id;
        this.categoryId = categoryId;
        this.info = info;
        this.parent_goods_id = parent_goods_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCourseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean getGiftBag() {
        return giftBag;
    }

    public void setGiftBag(Boolean giftBag) {
        this.giftBag = giftBag;
    }

    public Integer getAuthority() {
        return authority;
    }

    public void setAuthority(Integer authority) {
        this.authority = authority;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public Long getOrder() {
        return order;
    }

    public void setOrder(Long order) {
        this.order = order;
    }

    public Boolean getCared() {
        return cared;
    }

    public void setCared(Boolean cared) {
        this.cared = cared;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public Boolean getBought() {
        return bought;
    }

    public void setBought(Boolean bought) {
        this.bought = bought;
    }

    public String getGoods_id() {
        return goods_id;
    }

    public void setGoods_id(String goods_id) {
        this.goods_id = goods_id;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public String getInfo() {
        return info;
    }

    public void setInfo(String info) {
        this.info = info;
    }

    public String getParent_goods_id() {
        return parent_goods_id;
    }

    public void setParent_goods_id(String parent_goods_id) {
        this.parent_goods_id = parent_goods_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Course> getCourseList() {
        if (courseList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CourseDao targetDao = daoSession.getCourseDao();
            List<Course> courseListNew = targetDao._queryCourse_CourseList(goods_id);
            synchronized (this) {
                if(courseList == null) {
                    courseList = courseListNew;
                }
            }
        }
        return courseList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCourseList() {
        courseList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Lecture> getLectureList() {
        if (lectureList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LectureDao targetDao = daoSession.getLectureDao();
            List<Lecture> lectureListNew = targetDao._queryCourse_LectureList(goods_id);
            synchronized (this) {
                if(lectureList == null) {
                    lectureList = lectureListNew;
                }
            }
        }
        return lectureList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLectureList() {
        lectureList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
